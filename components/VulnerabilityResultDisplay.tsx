
import React, { useState, useMemo } from 'react';
import type { VulnerabilityScanResult, VulnerabilityFinding, VulnerabilityRiskLevel, VulnerabilityCategory } from '../types';
import { ShieldExclamationIcon, AlertTriangleIcon, CheckCircleIcon, UnknownIcon, FileTextIcon, CookieCareLogo, ExternalLinkIcon } from './Icons';
import { ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Tooltip } from 'recharts';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';


const getRiskStyle = (riskLevel: VulnerabilityRiskLevel) => {
    switch (riskLevel) {
        case 'Critical': return {
            color: 'text-red-700 dark:text-red-400', borderColor: 'border-red-600/30 dark:border-red-500/50',
            bgColor: 'bg-red-100 dark:bg-red-900/20', icon: <ShieldExclamationIcon className="h-6 w-6" />,
            badgeBg: 'bg-red-600 text-white', fill: 'var(--color-critical-fill)', stroke: 'var(--color-critical-stroke)'
        };
        case 'High': return {
            color: 'text-orange-600 dark:text-orange-400', borderColor: 'border-orange-500/30 dark:border-orange-500/50',
            bgColor: 'bg-orange-100 dark:bg-orange-900/20', icon: <AlertTriangleIcon className="h-6 w-6" />,
            badgeBg: 'bg-orange-500 text-white', fill: 'var(--color-high-fill)', stroke: 'var(--color-high-stroke)'
        };
        case 'Medium': return {
            color: 'text-yellow-600 dark:text-yellow-400', borderColor: 'border-yellow-500/30 dark:border-yellow-500/50',
            bgColor: 'bg-yellow-50 dark:bg-yellow-900/20', icon: <AlertTriangleIcon className="h-6 w-6" />,
            badgeBg: 'bg-yellow-500 text-yellow-900', fill: 'var(--color-medium-fill)', stroke: 'var(--color-medium-stroke)'
        };
        case 'Low': return {
            color: 'text-blue-600 dark:text-blue-400', borderColor: 'border-blue-500/30 dark:border-blue-500/50',
            bgColor: 'bg-blue-50 dark:bg-blue-900/20', icon: <CheckCircleIcon className="h-6 w-6" />,
            badgeBg: 'bg-blue-200 text-blue-800 dark:bg-blue-800/50 dark:text-blue-200', fill: 'var(--color-low-fill)', stroke: 'var(--color-low-stroke)'
        };
        default: return { // Informational
            color: 'text-slate-600 dark:text-slate-400', borderColor: 'border-slate-300 dark:border-slate-700',
            bgColor: 'bg-slate-100 dark:bg-slate-800/50', icon: <UnknownIcon className="h-6 w-6" />,
            badgeBg: 'bg-slate-200 text-slate-800 dark:bg-slate-700 dark:text-slate-200', fill: 'var(--color-info-fill)', stroke: 'var(--color-info-stroke)'
        };
    }
};

const PDFReportHeader: React.FC<{url: string}> = ({url}) => (
    <div className="hidden print:flex flex-col p-8 border-b border-[var(--border-primary)] mb-6 bg-[var(--bg-primary)]">
        <div className="flex items-center justify-between">
             <div className="flex items-center space-x-3">
                <CookieCareLogo className="h-10 w-auto text-brand-blue" />
                <h2 className="text-3xl font-bold text-[var(--text-headings)]">Vulnerability Report</h2>
            </div>
            <p className="text-sm text-[var(--text-primary)]">{new Date().toLocaleDateString()}</p>
        </div>
        <p className="text-[var(--text-primary)] mt-2">
          Scan results for: <span className="font-semibold text-brand-blue">{url}</span>
        </p>
    </div>
);


const RiskScoreGauge: React.FC<{ score: number }> = ({ score }) => {
    const percentage = (score / 10) * 100;
    let colorClass = 'text-green-500';
    if (score >= 4) colorClass = 'text-yellow-500';
    if (score >= 7) colorClass = 'text-orange-500';
    if (score >= 9) colorClass = 'text-red-500';

    return (
        <div className="relative w-48 h-24">
            <svg viewBox="0 0 36 18" className="w-full h-full">
                <path className="text-slate-200 dark:text-slate-700" stroke="currentColor" strokeWidth="2" fill="none"
                      d="M 2 16 A 16 16 0 0 1 34 16" />
                <path className={colorClass} stroke="currentColor" strokeWidth="2" fill="none" strokeDasharray={`${percentage}, 100`}
                      d="M 2 16 A 16 16 0 0 1 34 16" />
            </svg>
            <div className="absolute inset-0 flex items-end justify-center">
                <span className={`text-4xl font-bold ${colorClass}`}>{score.toFixed(1)}</span>
            </div>
        </div>
    );
};

const CategoryRadarChart: React.FC<{ findings: VulnerabilityFinding[] }> = ({ findings }) => {
    const riskOrder: Record<VulnerabilityRiskLevel, number> = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Informational': 1, };
    
    const dataByCategory = useMemo(() => {
        const categoryMap: Map<VulnerabilityCategory, number> = new Map();
        findings.forEach(finding => {
            const currentMaxRisk = categoryMap.get(finding.category) || 0;
            const findingRisk = riskOrder[finding.riskLevel];
            if (findingRisk > currentMaxRisk) {
                categoryMap.set(finding.category, findingRisk);
            }
        });

        const allCategories: VulnerabilityCategory[] = ['Security Headers', 'Cookie Configuration', 'Information Exposure', 'Frontend Security', 'Best Practices'];
        return allCategories.map(cat => ({
            category: cat,
            risk: categoryMap.get(cat) || 0,
        }));
    }, [findings]);

    return (
        <div className="h-80 w-full">
            <ResponsiveContainer>
                <RadarChart cx="50%" cy="50%" outerRadius="80%" data={dataByCategory}>
                    <PolarGrid stroke="var(--border-primary)" />
                    <PolarAngleAxis dataKey="category" tick={{ fill: 'var(--text-primary)', fontSize: 12 }} />
                    <PolarRadiusAxis angle={30} domain={[0, 5]} tick={false} axisLine={false} />
                    <Radar name="Risk Level" dataKey="risk" stroke="var(--brand-blue)" fill="var(--brand-blue)" fillOpacity={0.6} />
                    <Tooltip contentStyle={{ backgroundColor: 'var(--bg-tertiary)', border: '1px solid var(--border-primary)', borderRadius: '0.5rem' }}
                             formatter={(value: number) => [Object.keys(riskOrder).find(key => riskOrder[key as VulnerabilityRiskLevel] === value) || 'None', 'Highest Risk']}
                    />
                </RadarChart>
            </ResponsiveContainer>
        </div>
    );
};

const VulnerabilityFindingCard: React.FC<{ finding: VulnerabilityFinding }> = ({ finding }) => {
  const [isOpen, setIsOpen] = useState(false);
  const { badgeBg } = getRiskStyle(finding.riskLevel);

  return (
    <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm overflow-hidden transition-all duration-300">
        <button onClick={() => setIsOpen(!isOpen)} className="w-full flex items-center justify-between p-4 text-left" aria-expanded={isOpen}>
            <div className="flex items-center gap-4 flex-1 min-w-0">
                 <span className={`flex-shrink-0 inline-flex items-center justify-center rounded-full px-3 py-1 text-xs font-bold w-28 ${badgeBg}`}>
                    {finding.riskLevel}
                </span>
                <h4 className="font-semibold text-md text-[var(--text-headings)] truncate">{finding.name}</h4>
            </div>
            <svg className={`w-5 h-5 text-[var(--text-primary)] transform transition-transform duration-200 ml-4 ${isOpen ? 'rotate-180' : 'rotate-0'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
            </svg>
        </button>
        {isOpen && (
            <div className="px-5 pb-5 pt-2 border-t border-[var(--border-primary)] animate-fade-in-up space-y-5">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                    <div>
                        <h5 className="font-semibold text-[var(--text-headings)] text-sm mb-1">Category</h5>
                        <p className="text-[var(--text-primary)] text-sm">{finding.category}</p>
                    </div>
                    <div>
                        <h5 className="font-semibold text-red-600 dark:text-red-400 text-sm mb-1">Impact</h5>
                        <p className="text-[var(--text-primary)] text-sm">{finding.impact}</p>
                    </div>
                </div>

                <div>
                    <h5 className="font-semibold text-[var(--text-headings)] text-sm">Description</h5>
                    <p className="text-[var(--text-primary)] text-sm mt-1 prose-sm dark:prose-invert max-w-none">{finding.description}</p>
                </div>
                <div>
                    <h5 className="font-semibold text-[var(--text-headings)] text-sm">Evidence</h5>
                    <pre className="text-xs bg-[var(--bg-tertiary)] p-3 rounded-md mt-1 font-mono text-[var(--text-accent)] overflow-x-auto"><code>{finding.evidence}</code></pre>
                </div>
                 <div className="p-4 rounded-md bg-green-50 dark:bg-green-900/20 border border-green-500/20">
                    <h5 className="font-semibold text-green-800 dark:text-green-300 text-sm">Remediation</h5>
                    <p className="text-green-700 dark:text-green-300/90 text-sm mt-1 prose-sm dark:prose-invert max-w-none" dangerouslySetInnerHTML={{ __html: finding.remediation }}></p>
                </div>
                {finding.references.length > 0 && (
                    <div>
                         <h5 className="font-semibold text-[var(--text-headings)] text-sm">References</h5>
                         <ul className="mt-2 space-y-1">
                            {finding.references.map(ref => (
                                <li key={ref.url}>
                                    <a href={ref.url} target="_blank" rel="noopener noreferrer" className="flex items-center text-sm text-brand-blue hover:underline">
                                        {ref.title}
                                        <ExternalLinkIcon className="h-3 w-3 ml-1" />
                                    </a>
                                </li>
                            ))}
                         </ul>
                    </div>
                )}
            </div>
        )}
    </div>
  )
}

export const VulnerabilityResultDisplay: React.FC<{ result: VulnerabilityScanResult; scannedUrl: string }> = ({ result, scannedUrl }) => {
  const [activeFilter, setActiveFilter] = useState<VulnerabilityRiskLevel | 'All'>('All');
  const [isExporting, setIsExporting] = useState(false);

  const riskCounts = useMemo(() => {
    const counts: Record<VulnerabilityRiskLevel, number> = { Critical: 0, High: 0, Medium: 0, Low: 0, Informational: 0 };
    result.findings.forEach(f => counts[f.riskLevel]++);
    return counts;
  }, [result.findings]);
  
  const sortedAndFilteredFindings = useMemo(() => {
      const filtered = activeFilter === 'All'
          ? result.findings
          : result.findings.filter(f => f.riskLevel === activeFilter);
      
      const riskOrder: Record<VulnerabilityRiskLevel, number> = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Informational': 1 };
      return filtered.sort((a, b) => riskOrder[b.riskLevel] - riskOrder[a.riskLevel]);
  }, [result.findings, activeFilter]);
  
  const handleExportPDF = async () => {
    setIsExporting(true);
    const input = document.getElementById('vulnerability-report-area');
    if (!input) {
      setIsExporting(false);
      return;
    }

    const header = document.getElementById('pdf-header-vuln');
    if (header) header.style.display = 'flex';
    await new Promise(resolve => setTimeout(resolve, 100));

    const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    const bgColor = currentTheme === 'dark' ? '#1c2128' : '#ffffff';

    try {
      const pdf = new jsPDF({ orientation: 'p', unit: 'pt', format: 'a4' });
      await pdf.html(input, {
        html2canvas: { scale: 0.6, useCORS: true, backgroundColor: bgColor, logging: false, windowWidth: 1400 },
        autoPaging: 'slice',
        width: 515,
        margin: [40, 40, 40, 40],
      });
      pdf.save(`CookieCare_Vulnerability_Report_${new URL(scannedUrl).hostname}.pdf`);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("There was an error generating the PDF.");
    } finally {
      if (header) header.style.display = 'none';
      setIsExporting(false);
    }
  };

  return (
    <>
      <style>{`
        :root {
          --color-critical-stroke: #dc2626; --color-critical-fill: rgba(220, 38, 38, 0.6);
          --color-high-stroke: #ea580c; --color-high-fill: rgba(234, 88, 12, 0.6);
          --color-medium-stroke: #f59e0b; --color-medium-fill: rgba(245, 158, 11, 0.6);
          --color-low-stroke: #3b82f6; --color-low-fill: rgba(59, 130, 246, 0.6);
          --color-info-stroke: #64748b; --color-info-fill: rgba(100, 116, 139, 0.6);
        }
      `}</style>
      <div className="max-w-7xl mx-auto animate-fade-in-up">
        <div className="flex justify-between items-start mb-6">
            <div>
              <h3 className="text-2xl font-bold text-[var(--text-headings)]">Vulnerability Dashboard</h3>
              <p className="text-[var(--text-primary)] mt-1">
                Report for: <a href={scannedUrl} target="_blank" rel="noopener noreferrer" className="font-semibold text-brand-blue hover:underline">{scannedUrl}</a>
              </p>
            </div>
            <button onClick={handleExportPDF} disabled={isExporting} className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-brand-blue rounded-md shadow-lg hover:bg-brand-blue-light transition-all disabled:bg-slate-400">
                <FileTextIcon className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Download Report'}
            </button>
        </div>
        
        <div id="vulnerability-report-area">
          <div id="pdf-header-vuln" style={{display: 'none'}}><PDFReportHeader url={scannedUrl} /></div>
          
          <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] p-6 shadow-sm">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-center">
              <div className="flex flex-col items-center justify-center border-r-0 md:border-r border-[var(--border-primary)]">
                <h4 className="text-lg font-bold text-[var(--text-headings)] mb-2">Overall Risk Score</h4>
                <RiskScoreGauge score={result.overallRisk.score} />
                <p className={`mt-2 text-lg font-bold ${getRiskStyle(result.overallRisk.level).color}`}>{result.overallRisk.level} Risk</p>
              </div>
              <div className="col-span-1 md:col-span-2">
                <h4 className="text-lg font-bold text-[var(--text-headings)] mb-2">Executive Summary</h4>
                <p className="text-sm text-[var(--text-primary)]">{result.overallRisk.summary}</p>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8">
              <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] p-5 shadow-sm">
                  <h4 className="text-xl font-bold text-[var(--text-headings)] mb-2">Findings by Risk</h4>
                  <div className="flex flex-wrap gap-4 mt-4">
                      {(Object.keys(riskCounts) as VulnerabilityRiskLevel[]).map(level => (
                          <div key={level} className="text-center">
                              <p className={`text-4xl font-bold ${getRiskStyle(level).color}`}>{riskCounts[level]}</p>
                              <p className="text-sm font-semibold text-[var(--text-primary)]">{level}</p>
                          </div>
                      ))}
                  </div>
              </div>
              <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] p-5 shadow-sm">
                  <h4 className="text-xl font-bold text-[var(--text-headings)] mb-2">Risk Categories</h4>
                  <CategoryRadarChart findings={result.findings} />
              </div>
          </div>
        
          <div className="mt-8">
              <div className="flex justify-between items-center mb-4">
                  <h4 className="text-xl font-bold text-[var(--text-headings)]">Findings ({result.findings.length})</h4>
                  <div className="flex items-center gap-2 flex-wrap">
                      {(['All', 'Critical', 'High', 'Medium', 'Low', 'Informational'] as const).map(level => {
                          const count = level === 'All' ? result.findings.length : riskCounts[level];
                          if (level !== 'All' && count === 0) return null;
                          const isActive = activeFilter === level;
                          const style = getRiskStyle(level as VulnerabilityRiskLevel);
                          return (
                              <button key={level} onClick={() => setActiveFilter(level)}
                                      className={`px-3 py-1 text-xs font-bold rounded-full transition-colors ${
                                          isActive ? style.badgeBg : 'bg-[var(--bg-tertiary)] text-[var(--text-primary)] hover:bg-slate-300 dark:hover:bg-slate-600'
                                      }`}>
                                  {level} <span className={`ml-1.5 px-1.5 py-0.5 text-xs rounded-full ${isActive ? 'bg-white/20' : 'bg-slate-300 dark:bg-slate-600'}`}>{count}</span>
                              </button>
                          );
                      })}
                  </div>
              </div>

              {sortedAndFilteredFindings.length > 0 ? (
                  <div className="space-y-4">
                      {sortedAndFilteredFindings.map((finding, index) => (
                          <VulnerabilityFindingCard key={index} finding={finding} />
                      ))}
                  </div>
              ) : (
                  <div className="text-center py-12 px-6 bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)]">
                      <CheckCircleIcon className="h-12 w-12 mx-auto text-green-500" />
                      <h4 className="mt-4 text-lg font-semibold text-[var(--text-headings)]">No Vulnerabilities Found</h4>
                      <p className="mt-1 text-sm text-[var(--text-primary)]">Congratulations! No findings matched the selected filter.</p>
                  </div>
              )}
          </div>
        </div>
      </div>
    </>
  );
};
